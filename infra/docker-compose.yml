x-backend-env: &backend-env
  DB_HOST: postgres
  DB_PORT: ${DB_PORT}
  DB_USERNAME: ${DB_USERNAME}
  DB_PASSWORD: ${DB_PASSWORD}
  DB_NAME: ${DB_NAME}
  DB_TYPE: ${DB_TYPE}
  DB_SSL: ${DB_SSL}
  RABBITMQ_HOST: rabbitmq
  RABBITMQ_PORT: ${RABBITMQ_PORT}
  RABBITMQ_USER: ${RABBITMQ_USER}
  RABBITMQ_PASS: ${RABBITMQ_PASS}
  ELASTICSEARCH_URL: http://elasticsearch:9200

x-backend-deps: &backend-deps
  depends_on:
    postgres:
      condition: service_healthy
    rabbitmq:
      condition: service_healthy

x-logging: &default-logging
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"

x-resources: &backend-resources
  deploy:
    resources:
      limits:
        cpus: "1"
        memory: 512M
      reservations:
        cpus: "0.5"
        memory: 256M

services:
  backend:
    build:
      context: ../logistics-ddd-platform
      dockerfile: Dockerfile
      target: development
    command: bun --watch src/apps/inventory/backend/start.ts
    environment:
      <<: *backend-env
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    <<: [*default-logging, *backend-resources]
    networks:
      - backend-network
    ports:
      - "3000:3000"
    volumes:
      - ../logistics-ddd-platform:/app
      - /app/node_modules

  backoffice:
    build:
      context: ../logistics-ddd-platform
      dockerfile: Dockerfile
      target: development
    command: bun --watch src/apps/backoffice/backend/start.ts
    environment:
      <<: *backend-env
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    <<: [*default-logging, *backend-resources]
    networks:
      - backend-network
    ports:
      - "3001:3001"
    restart: unless-stopped
    volumes:
      - ../logistics-ddd-platform:/app
      - /app/node_modules

  health-check:
    build:
      context: ../logistics-ddd-platform
      dockerfile: Dockerfile
      target: development
    command: bun --watch src/apps/health-check/start.ts
    environment:
      <<: *backend-env
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    <<: [*default-logging, *backend-resources]
    networks:
      - backend-network
    ports:
      - "3002:3002"
    restart: unless-stopped
    volumes:
      - ../logistics-ddd-platform:/app
      - /app/node_modules

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    networks:
      - backend-network
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    <<: *default-logging
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    networks:
      - backend-network
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    <<: *default-logging
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - backend-network
    <<: *default-logging
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 2G
        reservations:
          cpus: "1"
          memory: 1G
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -f http://elasticsearch:9200/_cluster/health || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 5

  test:
    build:
      context: ../logistics-ddd-platform
      dockerfile: Dockerfile
    command: bun test
    environment:
      <<: *backend-env
      NODE_ENV: test
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    <<: [*default-logging, *backend-resources]
    networks:
      - backend-network
    volumes:
      - ../logistics-ddd-platform:/app
      - /app/node_modules

networks:
  backend-network:
    driver: bridge

volumes:
  postgres_data:
  rabbitmq_data:
  elasticsearch_data:
